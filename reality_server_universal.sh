#!/bin/bash

# REALITY Server Universal Installer v5.0
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –ª—é–±—É—é –≤–µ—Ä—Å–∏—é Xray

set -euo pipefail
trap 'echo -e "\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u xray -n 50"' ERR

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() { echo -e "${GREEN}[$(date +%H:%M:%S)]${NC} $1"; }
error() { echo -e "${RED}[$(date +%H:%M:%S)] ‚ùå $1${NC}"; }
warning() { echo -e "${YELLOW}[$(date +%H:%M:%S)] ‚ö†Ô∏è  $1${NC}"; }
debug() { echo -e "${CYAN}[$(date +%H:%M:%S)] üîç $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root
if [[ $EUID -ne 0 ]]; then
   error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo bash $0"
   exit 1
fi

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑—Ä—ã–≤–∞ SSH
export DEBIAN_FRONTEND=noninteractive
if [ -f /etc/ssh/sshd_config ]; then
    grep -q "^ClientAliveInterval" /etc/ssh/sshd_config || echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config
    grep -q "^ClientAliveCountMax" /etc/ssh/sshd_config || echo "ClientAliveCountMax 120" >> /etc/ssh/sshd_config
    systemctl reload sshd 2>/dev/null || true
fi

clear
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë   REALITY VPN UNIVERSAL INSTALLER     ‚ïë"
echo "‚ïë           Version 5.0                 ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup_system() {
    log "–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç —Å—Ç–∞—Ä—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    for service in xray v2ray v2ray-client; do
        systemctl stop $service 2>/dev/null || true
        systemctl disable $service 2>/dev/null || true
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    rm -f /etc/systemd/system/{xray,v2ray}*.service
    rm -rf /etc/{xray,v2ray} /usr/local/etc/{xray,v2ray}
    rm -f /usr/local/bin/{xray,v2ray} /usr/bin/{xray,v2ray}
    rm -f /tmp/{xray,v2ray,reality}* /root/{reality,client_setup,xray,v2ray}*.{sh,txt,log}
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    pkill -f xray 2>/dev/null || true
    pkill -f v2ray 2>/dev/null || true
    
    systemctl daemon-reload
    log "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    apt-get update -qq || {
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
        exit 1
    }
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    local packages=(wget unzip curl net-tools qrencode openssl jq)
    for pkg in "${packages[@]}"; do
        if ! command -v $pkg &> /dev/null; then
            debug "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $pkg..."
            apt-get install -y $pkg > /dev/null 2>&1 || warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $pkg"
        fi
    done
    
    log "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP
get_server_ip() {
    log "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    local ip=""
    for service in ifconfig.me ipinfo.io/ip api.ipify.org icanhazip.com; do
        ip=$(curl -s4 --max-time 5 $service 2>/dev/null)
        if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            break
        fi
    done
    
    if [ -z "$ip" ]; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP"
        exit 1
    fi
    
    SERVER_IP=$ip
    log "‚úÖ IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray
install_xray() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    local latest_version=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases/latest | jq -r .tag_name)
    if [ -z "$latest_version" ]; then
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é"
        latest_version="v1.8.16"
    fi
    log "–í–µ—Ä—Å–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $latest_version"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞
    cd /tmp
    rm -f Xray-linux-64.zip
    local download_url="https://github.com/XTLS/Xray-core/releases/download/${latest_version}/Xray-linux-64.zip"
    
    debug "–ó–∞–≥—Ä—É–∑–∫–∞ —Å $download_url"
    if ! wget -q --show-progress "$download_url" -O Xray-linux-64.zip; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Xray"
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    unzip -o -q Xray-linux-64.zip || {
        error "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞"
        exit 1
    }
    
    chmod +x xray
    mv xray /usr/local/bin/
    mkdir -p /etc/xray
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    if ! /usr/local/bin/xray version &> /dev/null; then
        error "Xray —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        exit 1
    fi
    
    XRAY_VERSION=$(/usr/local/bin/xray version | head -1 | awk '{print $2}')
    log "‚úÖ Xray $XRAY_VERSION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
generate_keys() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π..."
    
    UUID=$(/usr/local/bin/xray uuid)
    KEYS=$(/usr/local/bin/xray x25519)
    PRIVATE_KEY=$(echo "$KEYS" | grep "Private key:" | awk '{print $3}')
    PUBLIC_KEY=$(echo "$KEYS" | grep "Public key:" | awk '{print $3}')
    SHORT_ID=$(openssl rand -hex 4)
    
    if [ -z "$UUID" ] || [ -z "$PRIVATE_KEY" ] || [ -z "$PUBLIC_KEY" ]; then
        error "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"
        exit 1
    fi
    
    log "‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    local test_config=$(cat <<EOF
{
  "inbounds": [{
    "port": 9999,
    "protocol": "vless",
    "settings": {
      "clients": [{"id": "$UUID"}],
      "decryption": "none"
    },
    "streamSettings": {
      "network": "tcp",
      "security": "reality",
      "realitySettings": {
        "dest": "1.1.1.1:443",
        "serverNames": ["www.microsoft.com"],
        "privateKey": "$PRIVATE_KEY",
        "shortIds": ["$SHORT_ID"]
      }
    }
  }],
  "outbounds": [{"protocol": "freedom"}]
}
EOF
)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    echo "$test_config" > /tmp/test_reality.json
    
    local config_works=false
    if /usr/local/bin/xray test -config /tmp/test_reality.json &> /dev/null; then
        config_works=true
        debug "–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    fi
    rm -f /tmp/test_reality.json
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ "$config_works" = true ]; then
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        cat > /etc/xray/config.json << EOF
{
  "log": {
    "loglevel": "warning",
    "error": "/var/log/xray/error.log",
    "access": "/var/log/xray/access.log"
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$UUID",
            "flow": "xtls-rprx-vision"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "www.microsoft.com:443",
          "xver": 0,
          "serverNames": [
            "www.microsoft.com",
            "microsoft.com"
          ],
          "privateKey": "$PRIVATE_KEY",
          "shortIds": [
            "$SHORT_ID"
          ]
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": ["http", "tls"]
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "tag": "direct"
    }
  ],
  "policy": {
    "levels": {
      "0": {
        "handshake": 4,
        "connIdle": 300,
        "uplinkOnly": 2,
        "downlinkOnly": 5,
        "statsUserUplink": false,
        "statsUserDownlink": false,
        "bufferSize": 512
      }
    },
    "system": {
      "statsInboundDownlink": false,
      "statsInboundUplink": false,
      "statsOutboundDownlink": false,
      "statsOutboundUplink": false
    }
  }
}
EOF
    else
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        warning "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        cat > /etc/xray/config.json << EOF
{
  "log": {
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$UUID",
            "flow": "xtls-rprx-vision"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "www.microsoft.com:443",
          "xver": 0,
          "serverNames": [
            "www.microsoft.com"
          ],
          "privateKey": "$PRIVATE_KEY",
          "minClientVer": "",
          "maxClientVer": "",
          "maxTimeDiff": 0,
          "shortIds": [
            "",
            "$SHORT_ID"
          ]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom"
    }
  ]
}
EOF
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p /var/log/xray
    chown nobody:nogroup /var/log/xray
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if ! /usr/local/bin/xray test -config /etc/xray/config.json &> /tmp/xray_config_test.log; then
        error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        cat /tmp/xray_config_test.log
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        warning "–ü—ã—Ç–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        jq 'del(.inbounds[0].streamSettings.realitySettings.minClientVer) | 
            del(.inbounds[0].streamSettings.realitySettings.maxClientVer) |
            del(.inbounds[0].streamSettings.realitySettings.maxTimeDiff) |
            .inbounds[0].streamSettings.realitySettings.shortIds = [$SHORT_ID]' \
            /etc/xray/config.json > /tmp/fixed_config.json 2>/dev/null || true
        
        if [ -f /tmp/fixed_config.json ] && /usr/local/bin/xray test -config /tmp/fixed_config.json &> /dev/null; then
            mv /tmp/fixed_config.json /etc/xray/config.json
            log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞"
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            exit 1
        fi
    fi
    
    log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ systemd
setup_systemd() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    
    cat > /etc/systemd/system/xray.service << 'EOF'
[Unit]
Description=Xray Service
Documentation=https://github.com/xtls
After=network.target nss-lookup.target

[Service]
Type=simple
User=nobody
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=always
RestartSec=3
LimitNPROC=10000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chmod 644 /etc/systemd/system/xray.service
    chmod 644 /etc/xray/config.json
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd
    systemctl daemon-reload
    
    log "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–µ—Ä–≤–æ–ª–∞
setup_firewall() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞..."
    
    # UFW
    if command -v ufw &> /dev/null; then
        ufw allow 443/tcp > /dev/null 2>&1
        ufw allow 22/tcp > /dev/null 2>&1
        yes | ufw enable > /dev/null 2>&1
        debug "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # firewalld
    if command -v firewall-cmd &> /dev/null && systemctl is-active --quiet firewalld; then
        firewall-cmd --permanent --add-port=443/tcp > /dev/null 2>&1
        firewall-cmd --permanent --add-port=22/tcp > /dev/null 2>&1
        firewall-cmd --reload > /dev/null 2>&1
        debug "firewalld –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # iptables
    if command -v iptables &> /dev/null; then
        iptables -I INPUT -p tcp --dport 443 -j ACCEPT 2>/dev/null || true
        iptables -I INPUT -p tcp --dport 22 -j ACCEPT 2>/dev/null || true
        debug "iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    log "‚úÖ –§–∞–µ—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
start_service() {
    log "–ó–∞–ø—É—Å–∫ Xray —Å–µ—Ä–≤–∏—Å–∞..."
    
    systemctl enable xray > /dev/null 2>&1
    systemctl start xray
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    local attempts=0
    while [ $attempts -lt 10 ]; do
        if systemctl is-active --quiet xray; then
            log "‚úÖ Xray —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
            return 0
        fi
        sleep 1
        ((attempts++))
    done
    
    error "Xray –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    systemctl status xray --no-pager
    journalctl -u xray -n 50 --no-pager
    return 1
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
create_client_scripts() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > /root/reality_config.txt << EOF
========================================
     REALITY VPN SERVER CONFIGURATION
========================================
Generated: $(date)
Server Version: $XRAY_VERSION

CONNECTION DETAILS:
------------------
Server IP: $SERVER_IP
Port: 443
Protocol: VLESS with Reality

CREDENTIALS:
------------
UUID: $UUID
Public Key: $PUBLIC_KEY
Short ID: $SHORT_ID
SNI: www.microsoft.com
Fingerprint: chrome
Flow: xtls-rprx-vision

IMPORT LINK:
------------
vless://${UUID}@${SERVER_IP}:443?encryption=none&flow=xtls-rprx-vision&security=reality&sni=www.microsoft.com&fp=chrome&pbk=${PUBLIC_KEY}&sid=${SHORT_ID}&type=tcp#Reality-VPN

MOBILE APPS:
------------
Android: v2rayNG
iOS: FairVPN or Shadowrocket
========================================
EOF
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
    local vless_url="vless://${UUID}@${SERVER_IP}:443?encryption=none&flow=xtls-rprx-vision&security=reality&sni=www.microsoft.com&fp=chrome&pbk=${PUBLIC_KEY}&sid=${SHORT_ID}&type=tcp#Reality-VPN"
    
    # –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    cat > /root/client_setup.sh << 'CLIENTEOF'
#!/bin/bash

# Reality Client Auto-Installer

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +%H:%M:%S)]${NC} $1"; }
error() { echo -e "${RED}[$(date +%H:%M:%S)] ‚ùå $1${NC}"; }
warning() { echo -e "${YELLOW}[$(date +%H:%M:%S)] ‚ö†Ô∏è  $1${NC}"; }

if [[ $EUID -ne 0 ]]; then
   error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ root"
   exit 1
fi

clear
echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë    REALITY CLIENT AUTO-INSTALLER      ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
if [ -f "/root/reality_config.txt" ]; then
    log "–ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"
    SERVER_IP=$(grep "Server IP:" /root/reality_config.txt | awk '{print $3}')
    UUID=$(grep "UUID:" /root/reality_config.txt | awk '{print $2}')
    PUBLIC_KEY=$(grep "Public Key:" /root/reality_config.txt | awk '{print $3}')
    SHORT_ID=$(grep "Short ID:" /root/reality_config.txt | awk '{print $3}')
    
    if [ -n "$SERVER_IP" ] && [ -n "$UUID" ] && [ -n "$PUBLIC_KEY" ] && [ -n "$SHORT_ID" ]; then
        echo -e "${GREEN}–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:${NC}"
        echo "Server: $SERVER_IP"
        echo "UUID: ${UUID:0:8}..."
        echo
        read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ? (Y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            unset SERVER_IP UUID PUBLIC_KEY SHORT_ID
        fi
    fi
fi

# –†—É—á–Ω–æ–π –≤–≤–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ -z "$SERVER_IP" ]; then
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:${NC}"
    read -p "Server IP: " SERVER_IP
    read -p "UUID: " UUID
    read -p "Public Key: " PUBLIC_KEY
    read -p "Short ID: " SHORT_ID
fi

# –û—á–∏—Å—Ç–∫–∞
log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫..."
systemctl stop v2ray-client 2>/dev/null || true
systemctl disable v2ray-client 2>/dev/null || true
rm -rf /etc/v2ray /usr/local/bin/v2ray
pkill -f v2ray 2>/dev/null || true

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ V2Ray
log "–ó–∞–≥—Ä—É–∑–∫–∞ V2Ray..."
cd /tmp
rm -f v2ray-linux-64.zip
wget -q --show-progress https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-64.zip
unzip -o -q v2ray-linux-64.zip
chmod +x v2ray
mv v2ray /usr/local/bin/
mkdir -p /etc/v2ray

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > /etc/v2ray/config.json << EEOF
{
  "log": {
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "port": 10808,
      "listen": "127.0.0.1",
      "protocol": "socks",
      "settings": {
        "auth": "noauth",
        "udp": false
      }
    },
    {
      "port": 10809,
      "listen": "127.0.0.1",
      "protocol": "http"
    }
  ],
  "outbounds": [
    {
      "protocol": "vless",
      "settings": {
        "vnext": [
          {
            "address": "$SERVER_IP",
            "port": 443,
            "users": [
              {
                "id": "$UUID",
                "flow": "xtls-rprx-vision",
                "encryption": "none"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "fingerprint": "chrome",
          "serverName": "www.microsoft.com",
          "publicKey": "$PUBLIC_KEY",
          "shortId": "$SHORT_ID"
        }
      }
    }
  ]
}
EEOF

# Systemd
cat > /etc/systemd/system/v2ray-client.service << 'EEOF'
[Unit]
Description=V2Ray Client
After=network.target

[Service]
Type=simple
User=nobody
NoNewPrivileges=true
ExecStart=/usr/local/bin/v2ray run -config /etc/v2ray/config.json
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EEOF

# –ó–∞–ø—É—Å–∫
log "–ó–∞–ø—É—Å–∫ V2Ray –∫–ª–∏–µ–Ω—Ç–∞..."
systemctl daemon-reload
systemctl enable v2ray-client
systemctl start v2ray-client

sleep 2

if systemctl is-active --quiet v2ray-client; then
    log "‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!"
    
    # –¢–µ—Å—Ç
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
    if timeout 10 curl -x socks5://127.0.0.1:10808 -s https://httpbin.org/ip | grep -q origin; then
        NEW_IP=$(curl -x socks5://127.0.0.1:10808 -s https://httpbin.org/ip | jq -r .origin)
        log "‚úÖ VPN —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–æ–≤—ã–π IP: $NEW_IP"
    fi
    
    # n8n
    if command -v docker &> /dev/null && docker ps -a | grep -q n8n; then
        log "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ n8n..."
        docker stop n8n 2>/dev/null || true
        docker rm n8n 2>/dev/null || true
        docker run -d --restart unless-stopped --name n8n \
          -p 5678:5678 \
          -v n8n_data:/home/node/.n8n \
          -e HTTP_PROXY=http://127.0.0.1:10809 \
          -e HTTPS_PROXY=http://127.0.0.1:10809 \
          docker.n8n.io/n8nio/n8n
        log "‚úÖ n8n –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å VPN"
    fi
    
    echo
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!${NC}"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
    echo "SOCKS5 –ø—Ä–æ–∫—Å–∏: 127.0.0.1:10808"
    echo "HTTP –ø—Ä–æ–∫—Å–∏: 127.0.0.1:10809"
    echo
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞: curl -x socks5://127.0.0.1:10808 https://httpbin.org/ip"
else
    error "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    systemctl status v2ray-client --no-pager
fi
CLIENTEOF
    
    chmod +x /root/client_setup.sh
    
    # –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    cat > /root/reality_diagnostics.sh << 'DIAGEOF'
#!/bin/bash

YELLOW='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${YELLOW}     REALITY SERVER DIAGNOSTICS${NC}"
echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
echo -e "${YELLOW}‚ñ∂ Service Status:${NC}"
if systemctl is-active --quiet xray; then
    echo -e "${GREEN}‚úì Xray is running${NC}"
    echo "  PID: $(systemctl show -p MainPID xray | cut -d= -f2)"
    echo "  Uptime: $(systemctl show -p ActiveEnterTimestamp xray | cut -d= -f2-)"
else
    echo -e "${RED}‚úó Xray is not running${NC}"
fi
echo

# –ü–æ—Ä—Ç—ã
echo -e "${YELLOW}‚ñ∂ Port Status:${NC}"
if netstat -tlnp 2>/dev/null | grep -q ":443"; then
    echo -e "${GREEN}‚úì Port 443 is listening${NC}"
else
    echo -e "${RED}‚úó Port 443 is not listening${NC}"
fi
echo

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
echo -e "${YELLOW}‚ñ∂ Recent Logs:${NC}"
journalctl -u xray -n 10 --no-pager
echo

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
echo -e "${YELLOW}‚ñ∂ Configuration Test:${NC}"
if /usr/local/bin/xray test -config /etc/xray/config.json &> /dev/null; then
    echo -e "${GREEN}‚úì Configuration is valid${NC}"
else
    echo -e "${RED}‚úó Configuration has errors${NC}"
fi
echo

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
echo -e "${YELLOW}‚ñ∂ Resource Usage:${NC}"
systemctl status xray --no-pager | grep -E "Memory:|CPU:" || echo "No resource data available"
echo

# –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
echo -e "${YELLOW}‚ñ∂ Active Connections:${NC}"
netstat -tnp 2>/dev/null | grep xray | wc -l | xargs echo "Total connections:"

echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
DIAGEOF
    
    chmod +x /root/reality_diagnostics.sh
    
    # QR –∫–æ–¥
    echo -e "\n${YELLOW}üì± QR-–ö–û–î –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –£–°–¢–†–û–ô–°–¢–í:${NC}"
    echo "$vless_url" | qrencode -t ansiutf8 || {
        warning "QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ qrencode)"
        echo -e "\n${YELLOW}–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:${NC}"
        echo "$vless_url"
    }
    
    log "‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
show_results() {
    clear
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë    üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!    ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    echo -e "\n${YELLOW}üìã –î–ê–ù–ù–´–ï –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"
    echo "–ü–æ—Ä—Ç: 443"
    echo "UUID: $UUID"
    echo "Public Key: $PUBLIC_KEY"
    echo "Short ID: $SHORT_ID"
    echo "SNI: www.microsoft.com"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    echo -e "\n${YELLOW}üìÇ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:${NC}"
    echo "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: /root/reality_config.txt"
    echo "‚Ä¢ –ö–ª–∏–µ–Ω—Ç –¥–ª—è n8n: /root/client_setup.sh"
    echo "‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: /root/reality_diagnostics.sh"
    
    echo -e "\n${YELLOW}üì± –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –° –ú–û–ë–ò–õ–¨–ù–´–•:${NC}"
    echo "‚Ä¢ Android: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ v2rayNG"
    echo "‚Ä¢ iOS: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FairVPN –∏–ª–∏ Shadowrocket"
    echo "‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤—ã—à–µ"
    
    echo -e "\n${YELLOW}üíª –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï N8N:${NC}"
    echo "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å n8n:"
    echo "   ${CYAN}scp root@$SERVER_IP:/root/client_setup.sh ./${NC}"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ:"
    echo "   ${CYAN}sudo bash client_setup.sh${NC}"
    
    echo -e "\n${YELLOW}üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–û–ú:${NC}"
    echo "‚Ä¢ –°—Ç–∞—Ç—É—Å: ${CYAN}systemctl status xray${NC}"
    echo "‚Ä¢ –õ–æ–≥–∏: ${CYAN}journalctl -u xray -f${NC}"
    echo "‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${CYAN}bash /root/reality_diagnostics.sh${NC}"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${CYAN}systemctl restart xray${NC}"
    
    echo -e "\n${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
}

# ==================== –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ====================

main() {
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    set +e
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    START_TIME=$(date +%s)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
    cleanup_system || {
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–∏—Å—Ç–µ–º—ã"
        exit 1
    }
    
    install_dependencies || {
        error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        exit 1
    }
    
    get_server_ip || {
        error "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP"
        exit 1
    }
    
    install_xray || {
        error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray"
        exit 1
    }
    
    generate_keys || {
        error "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"
        exit 1
    }
    
    create_config || {
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        exit 1
    }
    
    setup_systemd || {
        error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ systemd"
        exit 1
    }
    
    setup_firewall || {
        error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–µ—Ä–≤–æ–ª–∞"
        exit 1
    }
    
    start_service || {
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
        exit 1
    }
    
    create_client_scripts || {
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"
        exit 1
    }
    
    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    show_results
    
    log "–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${DURATION} —Å–µ–∫—É–Ω–¥"
    
    # –£–±–∏—Ä–∞–µ–º –ª–æ–≤—É—à–∫—É –æ—à–∏–±–æ–∫
    trap - ERR
}

# –ó–∞–ø—É—Å–∫
main "$@"
